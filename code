#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iomanip>

using namespace std;

// Rounds a double value to the given number of decimal places
double roundTo(double value, int places) {
    if (places < 0)
        throw invalid_argument("Invalid number of decimal places");

    double factor = pow(10.0, places);
    return round(value * factor) / factor;
}

// Get key from value in unordered_map
string getKeyFromValue(unordered_map<string, double>& details, double value) {
    for (const auto& pair : details) {
        if (pair.second == value)
            return pair.first;
    }
    return "";
}

// Recursive function to balance the transactions
void findPath(unordered_map<string, double>& details) {
    auto maxIt = max_element(details.begin(), details.end(),
                             [](const auto& a, const auto& b) { return a.second < b.second; });
    auto minIt = min_element(details.begin(), details.end(),
                             [](const auto& a, const auto& b) { return a.second < b.second; });

    double maxValue = maxIt->second;
    double minValue = minIt->second;

    if (maxValue != minValue) {
        string maxKey = maxIt->first;
        string minKey = minIt->first;

        double result = roundTo(maxValue + minValue, 1);

        if (result >= 0.0) {
            cout << minKey << " needs to pay " << maxKey << ": " << fixed << setprecision(2) << fabs(minValue) << endl;
            details[maxKey] = result;
            details[minKey] = 0.0;
        } else {
            cout << minKey << " needs to pay " << maxKey << ": " << fixed << setprecision(2) << fabs(maxValue) << endl;
            details[maxKey] = 0.0;
            details[minKey] = result;
        }

        findPath(details);
    }
}

int main() {
    unordered_map<string, double> parm;

    parm["A"] = -5.0;
    parm["B"] = 25.0;
    parm["C"] = -20.0;
    parm["D"] = 25.0;
    parm["E"] = -20.0;
    parm["F"] = -5.0;

    findPath(parm);

    return 0;
}
